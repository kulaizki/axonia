<script lang="ts">
  import { niivueStore } from '$lib/stores/niivueStore';
  import NiiVueCanvas from '$lib/components/niivue/NiiVueCanvas.svelte';
  import FileUploader from '$lib/components/niivue/FileUploader.svelte';
  import ViewControls from '$lib/components/niivue/ViewControls.svelte';
  import InteractionGuide from '$lib/components/niivue/InteractionGuide.svelte';

  let canvas: HTMLCanvasElement;
  let nv: Niivue | null = null;
  let fileInput: HTMLInputElement;
  let isLoading = false;
  let errorMessage = '';
  let currentFile: string | null = null;
  let sliceType: number = 3;
  let selectedColormap: string = 'inferno';

  const availableColormaps: string[] = [
    'grayscale', 'negative', 'viridis', 'plasma', 'magma', 'inferno',
    'hot', 'cool', 'bone', 'pink', 'jet', 'hsv',
    'spring', 'summer', 'autumn', 'winter', 'surface'
  ];

  onMount(() => {
    const init = async () => {
      try {
        nv = new Niivue({
          backColor: [0.15, 0.15, 0.15, 1],
          colorbarHeight: 0.05,
          dragMode: 1,
          multiplanarForceRender: true,
          isResizeCanvas: true
        });
        nv.attachToCanvas(canvas);
        await loadDefaultFile();
      } catch(initError) {
        console.error("Failed to initialize Niivue:", initError);
        errorMessage = "Error initializing the viewer. Please refresh.";
        nv = null;
      }
      sliceType = sliceType;
      selectedColormap = selectedColormap;
    };

    init();

    return () => {
      if (nv && typeof (nv as any).destroy === 'function') {
        try {
          (nv as any).destroy();
        } catch (e) {
          console.error("Error calling Niivue destroy method:", e);
        }
      }
      nv = null;
    };
  });

  async function loadDefaultFile() {
    if (!nv) {
      errorMessage = "NiiVue viewer is not ready. Please wait or refresh.";
      console.error(errorMessage);
      return;
    }
    isLoading = true;
    errorMessage = '';
    currentFile = 'sample_brain.nii.gz (sample)';

    try {
      await nv.loadVolumes([{ url: './sample_brain.nii.gz' }]);
      updateSliceType();
      applyColormap();
    } catch (error) {
      console.error('Error loading default file "sample_brain.nii.gz":', error);
      if (error instanceof Error) {
        errorMessage = `Failed to load default: ${error.message}. Check console.`;
      } else {
        errorMessage = 'An unexpected error occurred loading default. Check console.';
      }
      currentFile = null;
    } finally {
      isLoading = false;
    }
  }

  async function handleFileUpload(event: Event) {
    const input = event.target as HTMLInputElement;
    if (!input.files || input.files.length === 0) return;
    if (!nv) {
      errorMessage = "NiiVue viewer is not ready. Please wait or refresh.";
      console.error(errorMessage);
      return;
    }

    const file = input.files[0];
    isLoading = true;
    errorMessage = '';
    currentFile = file.name;

    try {
      await nv.loadFromFile(file);
      if (fileInput) fileInput.value = '';
      updateSliceType();
      applyColormap();
    } catch (error) {
      console.error(`Error loading file "${file.name}":`, error);
      if (error instanceof Error) {
        errorMessage = `Failed to load: ${error.message}. Check console.`;
      } else {
        errorMessage = 'An unexpected error occurred. Check console.';
      }
      currentFile = null;
    } finally {
      isLoading = false;
    }
  }

  function applyColormap() {
    if (!nv || !nv.volumes || nv.volumes.length === 0) return;
    try {
      nv.volumes[0].colormap = selectedColormap;
      nv.updateGLVolume();
    } catch (e) {
      console.error("Error applying colormap:", e);
      errorMessage = "Failed to apply colormap.";
    }
  }

  function updateSliceType() {
    if (!nv) return;
    const multiplanarType = typeof (nv as any).sliceTypeMultiplanar === 'number'
                            ? (nv as any).sliceTypeMultiplanar
                            : 3;
    try {
      if (sliceType === 3) {
        nv.setSliceType(multiplanarType);
      } else {
        nv.setSliceType(sliceType);
      }
    } catch (e) {
      console.error("Error setting slice type:", e);
      errorMessage = "Failed to change view type.";
    }
  }

  function handleSliceTypeChange(event: Event) {
    const select = event.target as HTMLSelectElement;
    const newType = parseInt(select.value, 10);
    if (!isNaN(newType)) {
      sliceType = newType;
      if (nv) {
        updateSliceType();
      }
    }
  }

  function handleColormapChange() {
    if (nv) {
      applyColormap();
    }
  }

  function resetView() {
    if (nv) {
      try {
        nv.setDefaults();
        selectedColormap = 'inferno';
        sliceType = 3;
        if (nv.volumes?.length > 0) {
          applyColormap();
        }
        updateSliceType();
      } catch(e) {
        console.error("Error calling nv.setDefaults():", e);
        errorMessage = "Failed to reset view.";
      }
    }
  }
</script>

<div class="flex flex-col w-full max-w-6xl mx-auto p-4 space-y-6">
  <div class="flex flex-wrap gap-x-6 gap-y-4 justify-between items-center border-b pb-4 border-gray-700">
    <FileUploader />
    <ViewControls />
  </div>

  <div class="w-full h-[65vh] min-h-[450px] border border-gray-700 rounded-lg overflow-hidden bg-black shadow-lg relative">
    <NiiVueCanvas />
    
    {#if !$niivueStore.currentFile && !$niivueStore.isLoading && !$niivueStore.errorMessage && !$niivueStore.instance}
      <div class="absolute inset-0 flex items-center justify-center text-gray-600 pointer-events-none">
        <p class="bg-gray-900 bg-opacity-80 text-gray-300 px-4 py-2 rounded-md">Initializing Viewer...</p>
      </div>
    {:else if !$niivueStore.currentFile && !$niivueStore.isLoading && !$niivueStore.errorMessage && $niivueStore.instance}
      <div class="absolute inset-0 flex items-center justify-center text-gray-500 pointer-events-none">
        <p class="text-lg">Upload a file (.nii, .nii.gz, etc.) to begin</p>
      </div>
    {/if}
  </div>

  <InteractionGuide />
</div>